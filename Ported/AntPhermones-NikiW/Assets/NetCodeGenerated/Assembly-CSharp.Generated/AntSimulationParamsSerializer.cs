//THIS FILE IS AUTOGENERATED BY GHOSTCOMPILER. DON'T MODIFY OR ALTER.
using System;
using AOT;
using Unity.Burst;
using Unity.Networking.Transport;
using Unity.NetCode.LowLevel.Unsafe;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Entities;
using Unity.Collections;
using Unity.NetCode;
using Unity.Transforms;
using Unity.Mathematics;

namespace Assembly_CSharp.Generated
{
    [BurstCompile]
    public struct AntSimulationParamsGhostComponentSerializer
    {
        static GhostComponentSerializer.State GetState()
        {
            // This needs to be lazy initialized because otherwise there is a depenency on the static initialization order which breaks il2cpp builds due to TYpeManager not being initialized yet
            if (!s_StateInitialized)
            {
                s_State = new GhostComponentSerializer.State
                {
                    GhostFieldsHash = 1763098298634092055,
                    ExcludeFromComponentCollectionHash = 0,
                    ComponentType = ComponentType.ReadWrite<AntSimulationParams>(),
                    ComponentSize = UnsafeUtility.SizeOf<AntSimulationParams>(),
                    SnapshotSize = UnsafeUtility.SizeOf<Snapshot>(),
                    ChangeMaskBits = ChangeMaskBits,
                    SendMask = GhostComponentSerializer.SendMask.Interpolated | GhostComponentSerializer.SendMask.Predicted,
                    SendToOwner = SendToOwnerType.All,
                    SendForChildEntities = 1,
                    VariantHash = 0,
                    CopyToSnapshot =
                        new PortableFunctionPointer<GhostComponentSerializer.CopyToFromSnapshotDelegate>(CopyToSnapshot),
                    CopyFromSnapshot =
                        new PortableFunctionPointer<GhostComponentSerializer.CopyToFromSnapshotDelegate>(CopyFromSnapshot),
                    RestoreFromBackup =
                        new PortableFunctionPointer<GhostComponentSerializer.RestoreFromBackupDelegate>(RestoreFromBackup),
                    PredictDelta = new PortableFunctionPointer<GhostComponentSerializer.PredictDeltaDelegate>(PredictDelta),
                    CalculateChangeMask =
                        new PortableFunctionPointer<GhostComponentSerializer.CalculateChangeMaskDelegate>(
                            CalculateChangeMask),
                    Serialize = new PortableFunctionPointer<GhostComponentSerializer.SerializeDelegate>(Serialize),
                    Deserialize = new PortableFunctionPointer<GhostComponentSerializer.DeserializeDelegate>(Deserialize),
                    #if UNITY_EDITOR || DEVELOPMENT_BUILD
                    ReportPredictionErrors = new PortableFunctionPointer<GhostComponentSerializer.ReportPredictionErrorsDelegate>(ReportPredictionErrors),
                    #endif
                };
                #if UNITY_EDITOR || DEVELOPMENT_BUILD
                s_State.NumPredictionErrorNames = GetPredictionErrorNames(ref s_State.PredictionErrorNames);
                #endif
                s_StateInitialized = true;
            }
            return s_State;
        }
        private static bool s_StateInitialized;
        private static GhostComponentSerializer.State s_State;
        public static GhostComponentSerializer.State State => GetState();
        public struct Snapshot
        {
            public int antCount;
            public int mapSize;
            public float antSize_x;
            public float antSize_y;
            public float antSize_z;
            public float antSpeedSearching;
            public float antSpeedHoldingFood;
            public float pheromoneAddSpeedWithFood;
            public float pheromoneAddSpeedWhenSearching;
            public float pheromoneDecay;
            public float randomSteeringStrength;
            public float pheromoneSteerStrengthWithFood;
            public float pheromoneSteerStrengthWhenSearching;
            public float wallSteerStrength;
            public float seenTargetSteerStrength;
            public float colonySteerStrength;
            public int antRotationResolution;
            public float obstacleRadius;
            public uint renderAnts;
            public uint addWallsToTexture;
            public uint renderTargets;
            public uint ticksForAntToDie;
            public float colonyRadius;
        }
        public const int ChangeMaskBits = 21;
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.CopyToFromSnapshotDelegate))]
        public static void CopyToSnapshot(IntPtr stateData, IntPtr snapshotData, int snapshotOffset, int snapshotStride, IntPtr componentData, int componentStride, int count)
        {
            for (int i = 0; i < count; ++i)
            {
                ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData, snapshotOffset + snapshotStride*i);
                ref var component = ref GhostComponentSerializer.TypeCast<AntSimulationParams>(componentData, componentStride*i);
                ref var serializerState = ref GhostComponentSerializer.TypeCast<GhostSerializerState>(stateData, 0);
                snapshot.antCount = (int) component.antCount;
                snapshot.mapSize = (int) component.mapSize;
                snapshot.antSize_x = component.antSize.x;
                snapshot.antSize_y = component.antSize.y;
                snapshot.antSize_z = component.antSize.z;
                snapshot.antSpeedSearching = component.antSpeedSearching;
                snapshot.antSpeedHoldingFood = component.antSpeedHoldingFood;
                snapshot.pheromoneAddSpeedWithFood = component.pheromoneAddSpeedWithFood;
                snapshot.pheromoneAddSpeedWhenSearching = component.pheromoneAddSpeedWhenSearching;
                snapshot.pheromoneDecay = component.pheromoneDecay;
                snapshot.randomSteeringStrength = component.randomSteeringStrength;
                snapshot.pheromoneSteerStrengthWithFood = component.pheromoneSteerStrengthWithFood;
                snapshot.pheromoneSteerStrengthWhenSearching = component.pheromoneSteerStrengthWhenSearching;
                snapshot.wallSteerStrength = component.wallSteerStrength;
                snapshot.seenTargetSteerStrength = component.seenTargetSteerStrength;
                snapshot.colonySteerStrength = component.colonySteerStrength;
                snapshot.antRotationResolution = (int) component.antRotationResolution;
                snapshot.obstacleRadius = component.obstacleRadius;
                snapshot.renderAnts = component.renderAnts?1u:0;
                snapshot.addWallsToTexture = component.addWallsToTexture?1u:0;
                snapshot.renderTargets = component.renderTargets?1u:0;
                snapshot.ticksForAntToDie = (uint)component.ticksForAntToDie;
                snapshot.colonyRadius = component.colonyRadius;
            }
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.CopyToFromSnapshotDelegate))]
        public static void CopyFromSnapshot(IntPtr stateData, IntPtr snapshotData, int snapshotOffset, int snapshotStride, IntPtr componentData, int componentStride, int count)
        {
            for (int i = 0; i < count; ++i)
            {
                var deserializerState = GhostComponentSerializer.TypeCast<GhostDeserializerState>(stateData, 0);
                ref var snapshotInterpolationData = ref GhostComponentSerializer.TypeCast<SnapshotData.DataAtTick>(snapshotData, snapshotStride*i);
                ref var snapshotBefore = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotInterpolationData.SnapshotBefore, snapshotOffset);
                ref var snapshotAfter = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotInterpolationData.SnapshotAfter, snapshotOffset);
                //Compute the required owner mask for the components and buffers by retrievieng the ghost owner id from the data for the current tick.
                if (snapshotInterpolationData.GhostOwner > 0)
                {
                    var requiredOwnerMask = snapshotInterpolationData.GhostOwner == deserializerState.GhostOwner
                        ? SendToOwnerType.SendToOwner
                        : SendToOwnerType.SendToNonOwner;
                    if ((deserializerState.SendToOwner & requiredOwnerMask) == 0)
                        continue;
                }
                deserializerState.SnapshotTick = snapshotInterpolationData.Tick;
                float snapshotInterpolationFactorRaw = snapshotInterpolationData.InterpolationFactor;
                float snapshotInterpolationFactor = snapshotInterpolationFactorRaw;
                ref var component = ref GhostComponentSerializer.TypeCast<AntSimulationParams>(componentData, componentStride*i);
                component.antCount = (int) snapshotBefore.antCount;
                component.mapSize = (int) snapshotBefore.mapSize;
                component.antSize = new float3(snapshotBefore.antSize_x, snapshotBefore.antSize_y, snapshotBefore.antSize_z);
                component.antSpeedSearching = snapshotBefore.antSpeedSearching;
                component.antSpeedHoldingFood = snapshotBefore.antSpeedHoldingFood;
                component.pheromoneAddSpeedWithFood = snapshotBefore.pheromoneAddSpeedWithFood;
                component.pheromoneAddSpeedWhenSearching = snapshotBefore.pheromoneAddSpeedWhenSearching;
                component.pheromoneDecay = snapshotBefore.pheromoneDecay;
                component.randomSteeringStrength = snapshotBefore.randomSteeringStrength;
                component.pheromoneSteerStrengthWithFood = snapshotBefore.pheromoneSteerStrengthWithFood;
                component.pheromoneSteerStrengthWhenSearching = snapshotBefore.pheromoneSteerStrengthWhenSearching;
                component.wallSteerStrength = snapshotBefore.wallSteerStrength;
                component.seenTargetSteerStrength = snapshotBefore.seenTargetSteerStrength;
                component.colonySteerStrength = snapshotBefore.colonySteerStrength;
                component.antRotationResolution = (int) snapshotBefore.antRotationResolution;
                component.obstacleRadius = snapshotBefore.obstacleRadius;
                component.renderAnts = snapshotBefore.renderAnts != 0;
                component.addWallsToTexture = snapshotBefore.addWallsToTexture != 0;
                component.renderTargets = snapshotBefore.renderTargets != 0;
                component.ticksForAntToDie = (ushort) snapshotBefore.ticksForAntToDie;
                component.colonyRadius = snapshotBefore.colonyRadius;

            }
        }


        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.RestoreFromBackupDelegate))]
        public static void RestoreFromBackup(IntPtr componentData, IntPtr backupData)
        {
            ref var component = ref GhostComponentSerializer.TypeCast<AntSimulationParams>(componentData, 0);
            ref var backup = ref GhostComponentSerializer.TypeCast<AntSimulationParams>(backupData, 0);
            component.antCount = backup.antCount;
            component.mapSize = backup.mapSize;
            component.antSize.x = backup.antSize.x;
            component.antSize.y = backup.antSize.y;
            component.antSize.z = backup.antSize.z;
            component.antSpeedSearching = backup.antSpeedSearching;
            component.antSpeedHoldingFood = backup.antSpeedHoldingFood;
            component.pheromoneAddSpeedWithFood = backup.pheromoneAddSpeedWithFood;
            component.pheromoneAddSpeedWhenSearching = backup.pheromoneAddSpeedWhenSearching;
            component.pheromoneDecay = backup.pheromoneDecay;
            component.randomSteeringStrength = backup.randomSteeringStrength;
            component.pheromoneSteerStrengthWithFood = backup.pheromoneSteerStrengthWithFood;
            component.pheromoneSteerStrengthWhenSearching = backup.pheromoneSteerStrengthWhenSearching;
            component.wallSteerStrength = backup.wallSteerStrength;
            component.seenTargetSteerStrength = backup.seenTargetSteerStrength;
            component.colonySteerStrength = backup.colonySteerStrength;
            component.antRotationResolution = backup.antRotationResolution;
            component.obstacleRadius = backup.obstacleRadius;
            component.renderAnts = backup.renderAnts;
            component.addWallsToTexture = backup.addWallsToTexture;
            component.renderTargets = backup.renderTargets;
            component.ticksForAntToDie = backup.ticksForAntToDie;
            component.colonyRadius = backup.colonyRadius;
        }

        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.PredictDeltaDelegate))]
        public static void PredictDelta(IntPtr snapshotData, IntPtr baseline1Data, IntPtr baseline2Data, ref GhostDeltaPredictor predictor)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline1 = ref GhostComponentSerializer.TypeCast<Snapshot>(baseline1Data);
            ref var baseline2 = ref GhostComponentSerializer.TypeCast<Snapshot>(baseline2Data);
            snapshot.antCount = predictor.PredictInt(snapshot.antCount, baseline1.antCount, baseline2.antCount);
            snapshot.mapSize = predictor.PredictInt(snapshot.mapSize, baseline1.mapSize, baseline2.mapSize);
            snapshot.antRotationResolution = predictor.PredictInt(snapshot.antRotationResolution, baseline1.antRotationResolution, baseline2.antRotationResolution);
            snapshot.renderAnts = (uint)predictor.PredictInt((int)snapshot.renderAnts, (int)baseline1.renderAnts, (int)baseline2.renderAnts);
            snapshot.addWallsToTexture = (uint)predictor.PredictInt((int)snapshot.addWallsToTexture, (int)baseline1.addWallsToTexture, (int)baseline2.addWallsToTexture);
            snapshot.renderTargets = (uint)predictor.PredictInt((int)snapshot.renderTargets, (int)baseline1.renderTargets, (int)baseline2.renderTargets);
            snapshot.ticksForAntToDie = (uint)predictor.PredictInt((int)snapshot.ticksForAntToDie, (int)baseline1.ticksForAntToDie, (int)baseline2.ticksForAntToDie);
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.CalculateChangeMaskDelegate))]
        public static void CalculateChangeMask(IntPtr snapshotData, IntPtr baselineData, IntPtr bits, int startOffset)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline = ref GhostComponentSerializer.TypeCast<Snapshot>(baselineData);
            uint changeMask;
            changeMask = (snapshot.antCount != baseline.antCount) ? 1u : 0;
            changeMask |= (snapshot.mapSize != baseline.mapSize) ? (1u<<1) : 0;
            changeMask |= (snapshot.antSize_x != baseline.antSize_x) ? (1u<<2) : 0;
            changeMask |= (snapshot.antSize_y != baseline.antSize_y) ? (1u<<2) : 0;
            changeMask |= (snapshot.antSize_z != baseline.antSize_z) ? (1u<<2) : 0;
            changeMask |= (snapshot.antSpeedSearching != baseline.antSpeedSearching) ? (1u<<3) : 0;
            changeMask |= (snapshot.antSpeedHoldingFood != baseline.antSpeedHoldingFood) ? (1u<<4) : 0;
            changeMask |= (snapshot.pheromoneAddSpeedWithFood != baseline.pheromoneAddSpeedWithFood) ? (1u<<5) : 0;
            changeMask |= (snapshot.pheromoneAddSpeedWhenSearching != baseline.pheromoneAddSpeedWhenSearching) ? (1u<<6) : 0;
            changeMask |= (snapshot.pheromoneDecay != baseline.pheromoneDecay) ? (1u<<7) : 0;
            changeMask |= (snapshot.randomSteeringStrength != baseline.randomSteeringStrength) ? (1u<<8) : 0;
            changeMask |= (snapshot.pheromoneSteerStrengthWithFood != baseline.pheromoneSteerStrengthWithFood) ? (1u<<9) : 0;
            changeMask |= (snapshot.pheromoneSteerStrengthWhenSearching != baseline.pheromoneSteerStrengthWhenSearching) ? (1u<<10) : 0;
            changeMask |= (snapshot.wallSteerStrength != baseline.wallSteerStrength) ? (1u<<11) : 0;
            changeMask |= (snapshot.seenTargetSteerStrength != baseline.seenTargetSteerStrength) ? (1u<<12) : 0;
            changeMask |= (snapshot.colonySteerStrength != baseline.colonySteerStrength) ? (1u<<13) : 0;
            changeMask |= (snapshot.antRotationResolution != baseline.antRotationResolution) ? (1u<<14) : 0;
            changeMask |= (snapshot.obstacleRadius != baseline.obstacleRadius) ? (1u<<15) : 0;
            changeMask |= (snapshot.renderAnts != baseline.renderAnts) ? (1u<<16) : 0;
            changeMask |= (snapshot.addWallsToTexture != baseline.addWallsToTexture) ? (1u<<17) : 0;
            changeMask |= (snapshot.renderTargets != baseline.renderTargets) ? (1u<<18) : 0;
            changeMask |= (snapshot.ticksForAntToDie != baseline.ticksForAntToDie) ? (1u<<19) : 0;
            changeMask |= (snapshot.colonyRadius != baseline.colonyRadius) ? (1u<<20) : 0;
            GhostComponentSerializer.CopyToChangeMask(bits, changeMask, startOffset, 21);
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.SerializeDelegate))]
        public static void Serialize(IntPtr snapshotData, IntPtr baselineData, ref DataStreamWriter writer, ref NetworkCompressionModel compressionModel, IntPtr changeMaskData, int startOffset)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline = ref GhostComponentSerializer.TypeCast<Snapshot>(baselineData);
            uint changeMask = GhostComponentSerializer.CopyFromChangeMask(changeMaskData, startOffset, ChangeMaskBits);
            if ((changeMask & (1 << 0)) != 0)
                writer.WritePackedIntDelta(snapshot.antCount, baseline.antCount, compressionModel);
            if ((changeMask & (1 << 1)) != 0)
                writer.WritePackedIntDelta(snapshot.mapSize, baseline.mapSize, compressionModel);
            if ((changeMask & (1 << 2)) != 0)
                writer.WritePackedFloatDelta(snapshot.antSize_x, baseline.antSize_x, compressionModel);
            if ((changeMask & (1 << 2)) != 0)
                writer.WritePackedFloatDelta(snapshot.antSize_y, baseline.antSize_y, compressionModel);
            if ((changeMask & (1 << 2)) != 0)
                writer.WritePackedFloatDelta(snapshot.antSize_z, baseline.antSize_z, compressionModel);
            if ((changeMask & (1 << 3)) != 0)
                writer.WritePackedFloatDelta(snapshot.antSpeedSearching, baseline.antSpeedSearching, compressionModel);
            if ((changeMask & (1 << 4)) != 0)
                writer.WritePackedFloatDelta(snapshot.antSpeedHoldingFood, baseline.antSpeedHoldingFood, compressionModel);
            if ((changeMask & (1 << 5)) != 0)
                writer.WritePackedFloatDelta(snapshot.pheromoneAddSpeedWithFood, baseline.pheromoneAddSpeedWithFood, compressionModel);
            if ((changeMask & (1 << 6)) != 0)
                writer.WritePackedFloatDelta(snapshot.pheromoneAddSpeedWhenSearching, baseline.pheromoneAddSpeedWhenSearching, compressionModel);
            if ((changeMask & (1 << 7)) != 0)
                writer.WritePackedFloatDelta(snapshot.pheromoneDecay, baseline.pheromoneDecay, compressionModel);
            if ((changeMask & (1 << 8)) != 0)
                writer.WritePackedFloatDelta(snapshot.randomSteeringStrength, baseline.randomSteeringStrength, compressionModel);
            if ((changeMask & (1 << 9)) != 0)
                writer.WritePackedFloatDelta(snapshot.pheromoneSteerStrengthWithFood, baseline.pheromoneSteerStrengthWithFood, compressionModel);
            if ((changeMask & (1 << 10)) != 0)
                writer.WritePackedFloatDelta(snapshot.pheromoneSteerStrengthWhenSearching, baseline.pheromoneSteerStrengthWhenSearching, compressionModel);
            if ((changeMask & (1 << 11)) != 0)
                writer.WritePackedFloatDelta(snapshot.wallSteerStrength, baseline.wallSteerStrength, compressionModel);
            if ((changeMask & (1 << 12)) != 0)
                writer.WritePackedFloatDelta(snapshot.seenTargetSteerStrength, baseline.seenTargetSteerStrength, compressionModel);
            if ((changeMask & (1 << 13)) != 0)
                writer.WritePackedFloatDelta(snapshot.colonySteerStrength, baseline.colonySteerStrength, compressionModel);
            if ((changeMask & (1 << 14)) != 0)
                writer.WritePackedIntDelta(snapshot.antRotationResolution, baseline.antRotationResolution, compressionModel);
            if ((changeMask & (1 << 15)) != 0)
                writer.WritePackedFloatDelta(snapshot.obstacleRadius, baseline.obstacleRadius, compressionModel);
            if ((changeMask & (1 << 16)) != 0)
                writer.WritePackedUIntDelta(snapshot.renderAnts, baseline.renderAnts, compressionModel);
            if ((changeMask & (1 << 17)) != 0)
                writer.WritePackedUIntDelta(snapshot.addWallsToTexture, baseline.addWallsToTexture, compressionModel);
            if ((changeMask & (1 << 18)) != 0)
                writer.WritePackedUIntDelta(snapshot.renderTargets, baseline.renderTargets, compressionModel);
            if ((changeMask & (1 << 19)) != 0)
                writer.WritePackedUIntDelta(snapshot.ticksForAntToDie, baseline.ticksForAntToDie, compressionModel);
            if ((changeMask & (1 << 20)) != 0)
                writer.WritePackedFloatDelta(snapshot.colonyRadius, baseline.colonyRadius, compressionModel);
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.DeserializeDelegate))]
        public static void Deserialize(IntPtr snapshotData, IntPtr baselineData, ref DataStreamReader reader, ref NetworkCompressionModel compressionModel, IntPtr changeMaskData, int startOffset)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline = ref GhostComponentSerializer.TypeCast<Snapshot>(baselineData);
            uint changeMask = GhostComponentSerializer.CopyFromChangeMask(changeMaskData, startOffset, ChangeMaskBits);
            if ((changeMask & (1 << 0)) != 0)
                snapshot.antCount = reader.ReadPackedIntDelta(baseline.antCount, compressionModel);
            else
                snapshot.antCount = baseline.antCount;
            if ((changeMask & (1 << 1)) != 0)
                snapshot.mapSize = reader.ReadPackedIntDelta(baseline.mapSize, compressionModel);
            else
                snapshot.mapSize = baseline.mapSize;
            if ((changeMask & (1 << 2)) != 0)
                snapshot.antSize_x = reader.ReadPackedFloatDelta(baseline.antSize_x, compressionModel);
            else
                snapshot.antSize_x = baseline.antSize_x;
            if ((changeMask & (1 << 2)) != 0)
                snapshot.antSize_y = reader.ReadPackedFloatDelta(baseline.antSize_y, compressionModel);
            else
                snapshot.antSize_y = baseline.antSize_y;
            if ((changeMask & (1 << 2)) != 0)
                snapshot.antSize_z = reader.ReadPackedFloatDelta(baseline.antSize_z, compressionModel);
            else
                snapshot.antSize_z = baseline.antSize_z;
            if ((changeMask & (1 << 3)) != 0)
                snapshot.antSpeedSearching = reader.ReadPackedFloatDelta(baseline.antSpeedSearching, compressionModel);
            else
                snapshot.antSpeedSearching = baseline.antSpeedSearching;
            if ((changeMask & (1 << 4)) != 0)
                snapshot.antSpeedHoldingFood = reader.ReadPackedFloatDelta(baseline.antSpeedHoldingFood, compressionModel);
            else
                snapshot.antSpeedHoldingFood = baseline.antSpeedHoldingFood;
            if ((changeMask & (1 << 5)) != 0)
                snapshot.pheromoneAddSpeedWithFood = reader.ReadPackedFloatDelta(baseline.pheromoneAddSpeedWithFood, compressionModel);
            else
                snapshot.pheromoneAddSpeedWithFood = baseline.pheromoneAddSpeedWithFood;
            if ((changeMask & (1 << 6)) != 0)
                snapshot.pheromoneAddSpeedWhenSearching = reader.ReadPackedFloatDelta(baseline.pheromoneAddSpeedWhenSearching, compressionModel);
            else
                snapshot.pheromoneAddSpeedWhenSearching = baseline.pheromoneAddSpeedWhenSearching;
            if ((changeMask & (1 << 7)) != 0)
                snapshot.pheromoneDecay = reader.ReadPackedFloatDelta(baseline.pheromoneDecay, compressionModel);
            else
                snapshot.pheromoneDecay = baseline.pheromoneDecay;
            if ((changeMask & (1 << 8)) != 0)
                snapshot.randomSteeringStrength = reader.ReadPackedFloatDelta(baseline.randomSteeringStrength, compressionModel);
            else
                snapshot.randomSteeringStrength = baseline.randomSteeringStrength;
            if ((changeMask & (1 << 9)) != 0)
                snapshot.pheromoneSteerStrengthWithFood = reader.ReadPackedFloatDelta(baseline.pheromoneSteerStrengthWithFood, compressionModel);
            else
                snapshot.pheromoneSteerStrengthWithFood = baseline.pheromoneSteerStrengthWithFood;
            if ((changeMask & (1 << 10)) != 0)
                snapshot.pheromoneSteerStrengthWhenSearching = reader.ReadPackedFloatDelta(baseline.pheromoneSteerStrengthWhenSearching, compressionModel);
            else
                snapshot.pheromoneSteerStrengthWhenSearching = baseline.pheromoneSteerStrengthWhenSearching;
            if ((changeMask & (1 << 11)) != 0)
                snapshot.wallSteerStrength = reader.ReadPackedFloatDelta(baseline.wallSteerStrength, compressionModel);
            else
                snapshot.wallSteerStrength = baseline.wallSteerStrength;
            if ((changeMask & (1 << 12)) != 0)
                snapshot.seenTargetSteerStrength = reader.ReadPackedFloatDelta(baseline.seenTargetSteerStrength, compressionModel);
            else
                snapshot.seenTargetSteerStrength = baseline.seenTargetSteerStrength;
            if ((changeMask & (1 << 13)) != 0)
                snapshot.colonySteerStrength = reader.ReadPackedFloatDelta(baseline.colonySteerStrength, compressionModel);
            else
                snapshot.colonySteerStrength = baseline.colonySteerStrength;
            if ((changeMask & (1 << 14)) != 0)
                snapshot.antRotationResolution = reader.ReadPackedIntDelta(baseline.antRotationResolution, compressionModel);
            else
                snapshot.antRotationResolution = baseline.antRotationResolution;
            if ((changeMask & (1 << 15)) != 0)
                snapshot.obstacleRadius = reader.ReadPackedFloatDelta(baseline.obstacleRadius, compressionModel);
            else
                snapshot.obstacleRadius = baseline.obstacleRadius;
            if ((changeMask & (1 << 16)) != 0)
                snapshot.renderAnts = reader.ReadPackedUIntDelta(baseline.renderAnts, compressionModel);
            else
                snapshot.renderAnts = baseline.renderAnts;
            if ((changeMask & (1 << 17)) != 0)
                snapshot.addWallsToTexture = reader.ReadPackedUIntDelta(baseline.addWallsToTexture, compressionModel);
            else
                snapshot.addWallsToTexture = baseline.addWallsToTexture;
            if ((changeMask & (1 << 18)) != 0)
                snapshot.renderTargets = reader.ReadPackedUIntDelta(baseline.renderTargets, compressionModel);
            else
                snapshot.renderTargets = baseline.renderTargets;
            if ((changeMask & (1 << 19)) != 0)
                snapshot.ticksForAntToDie = reader.ReadPackedUIntDelta(baseline.ticksForAntToDie, compressionModel);
            else
                snapshot.ticksForAntToDie = baseline.ticksForAntToDie;
            if ((changeMask & (1 << 20)) != 0)
                snapshot.colonyRadius = reader.ReadPackedFloatDelta(baseline.colonyRadius, compressionModel);
            else
                snapshot.colonyRadius = baseline.colonyRadius;
        }
        #if UNITY_EDITOR || DEVELOPMENT_BUILD
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.ReportPredictionErrorsDelegate))]
        public static void ReportPredictionErrors(IntPtr componentData, IntPtr backupData, ref UnsafeList<float> errors)
        {
            ref var component = ref GhostComponentSerializer.TypeCast<AntSimulationParams>(componentData, 0);
            ref var backup = ref GhostComponentSerializer.TypeCast<AntSimulationParams>(backupData, 0);
            int errorIndex = 0;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.antCount - backup.antCount));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.mapSize - backup.mapSize));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.antSize, backup.antSize));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.antSpeedSearching - backup.antSpeedSearching));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.antSpeedHoldingFood - backup.antSpeedHoldingFood));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.pheromoneAddSpeedWithFood - backup.pheromoneAddSpeedWithFood));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.pheromoneAddSpeedWhenSearching - backup.pheromoneAddSpeedWhenSearching));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.pheromoneDecay - backup.pheromoneDecay));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.randomSteeringStrength - backup.randomSteeringStrength));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.pheromoneSteerStrengthWithFood - backup.pheromoneSteerStrengthWithFood));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.pheromoneSteerStrengthWhenSearching - backup.pheromoneSteerStrengthWhenSearching));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.wallSteerStrength - backup.wallSteerStrength));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.seenTargetSteerStrength - backup.seenTargetSteerStrength));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.colonySteerStrength - backup.colonySteerStrength));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.antRotationResolution - backup.antRotationResolution));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.obstacleRadius - backup.obstacleRadius));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], (component.renderAnts != backup.renderAnts) ? 1 : 0);
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], (component.addWallsToTexture != backup.addWallsToTexture) ? 1 : 0);
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], (component.renderTargets != backup.renderTargets) ? 1 : 0);
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex],
                (component.ticksForAntToDie > backup.ticksForAntToDie) ?
                (component.ticksForAntToDie - backup.ticksForAntToDie) :
                (backup.ticksForAntToDie - component.ticksForAntToDie));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.colonyRadius - backup.colonyRadius));
            ++errorIndex;
        }
        public static int GetPredictionErrorNames(ref FixedString512 names)
        {
            int nameCount = 0;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("antCount"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("mapSize"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("antSize"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("antSpeedSearching"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("antSpeedHoldingFood"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("pheromoneAddSpeedWithFood"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("pheromoneAddSpeedWhenSearching"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("pheromoneDecay"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("randomSteeringStrength"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("pheromoneSteerStrengthWithFood"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("pheromoneSteerStrengthWhenSearching"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("wallSteerStrength"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("seenTargetSteerStrength"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("colonySteerStrength"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("antRotationResolution"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("obstacleRadius"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("renderAnts"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("addWallsToTexture"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("renderTargets"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("ticksForAntToDie"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("colonyRadius"));
            ++nameCount;
            return nameCount;
        }
        #endif
    }
}
